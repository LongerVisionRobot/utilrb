=== Version 0.2.3

 * new features:
    - BenchmarkAllocation, a Benchmark-like interface to benchmark object
      allocation
    - ValueSet#delete_if
    - Time#from_hms takes a time as "h:m:s.ms" and builds the corresponding
      Time object. Note that "s", "s.ms", "m:s", "m:s.ms", ... are accepted
      formats

 * changes and fixes:
    - define Queue#get only if we are using Ruby's core Queue. The current
      implementation is incompatible with fastthread for instance (and 
      fastthhread's maintainer does not want #get on its Queue)
    - fix ValueSet#== raising if the argument is not a ValueSet

=== Version 0.2.2
The "don't forget to bump version number" release. 0.2 was supposed to be 0.2.1

 * new features:
    - Queue#get: waits for the queue to be not empty and returns all elements at 
      once. A non_block parameter is given which makes get() return [] if the
      queue is empty

 * changes:
    - Array#to_s and Hash#to_s now enclose the result in [] and {}. The difference
      with #inspect is that we call #to_s on the elements.

=== Version 0.2.1
 * new features:
    - Kernel#is_singleton?
    - Module#inherited_enumerable (class_inherited_enumerable on steroids)
    - Module#attribute() can be used in singleton classes (previously we had to 
      call class_attribute() in the class itself)
    - UnboundMethod#call(obj, *args, &block) calls the method on obj with 
      the provided arguments (does m.bind(obj).call(*args, &block))

 * changes:
    - changed semantics of Module::include for inclusion of modules in modules:
      the source_module::ClassExtension gets included in
      target_module::ClassExtension.  Previously, it was extending the target's
      singleton class. This way, Module really acts as a mixin for both class
      methods and instance methods

=== Version 0.1
 * Initial release


